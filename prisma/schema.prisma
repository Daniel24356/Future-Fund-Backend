// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  LOAN_REPAYMENT
  BILL_PAYMENT
  INVESTMENT
  CONTRIBUTION
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  PAID
  DEFAULTED
}

enum DepositStatus {
  PENDING
  COMPLETED
}

enum PaymentStatus {
  PAID
  UNPAID
}

model User {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  creditScore     Int     @default(200)
  balance        Float    @default(0.0)
  role           UserRole @default(USER)
  emailVerified  Boolean   @default(false)
  otp            String?
  otpExpiry      String?
  phoneNumber    String?  @unique
  profilePicture String?
  transactions   Transaction[]
  loans          Loan[]
  investments    Investment[]
  contributions  ContributionMember[]
  passwordHistory PasswordHistory[] 
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  BillPayment BillPayment[]

  Contribution Contribution[]
}

model Transaction {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  type          TransactionType
  status        DepositStatus?
  amount        Float
  description   String?
  createdAt     DateTime @default(now())
}

model Loan {
  id              String     @id @default(uuid())
  cursor Int @default(autoincrement()) @unique
  user            User       @relation(fields: [userId], references: [id])
  userId          String
  autoPaymentEnabled Boolean @default(false) 
  amount          Float
  interestRate    Float
  totalRepayable  Float
  term            Int 
  accountStatement String?
  homeAddress     String?
  dueAmount       Float
  status          LoanStatus @default(PENDING)
  dueDate         DateTime?
  paidAmount      Float      @default(0.0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model BillPayment {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  service       String
  amount        Float
  referenceId   String  @unique
  status        PaymentStatus @default(UNPAID)
  createdAt     DateTime @default(now())
}

model Investment {
  id            String  @id @default(uuid())
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  plan          String
  amount        Float
  interestRate  Float
  duration      Int     // In months
  maturityDate  DateTime
  status        PaymentStatus @default(UNPAID)
  createdAt     DateTime @default(now())
}

model Contribution {
  id            String  @id @default(uuid())
  name          String
  createdBy     User    @relation(fields: [createdById], references: [id])
  createdById   String  
  members       ContributionMember[]
  amountPerUser Float
  maxMembers    Int
  cycle         String
  createdAt     DateTime @default(now())
}

model ContributionMember {
  id               String  @id @default(uuid())
  user             User    @relation(fields: [userId], references: [id])
  userId           String
  contribution     Contribution @relation(fields: [contributionId], references: [id])
  contributionId   String
  status           PaymentStatus @default(UNPAID)
  createdAt        DateTime @default(now())
}

model PasswordHistory {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  passwordHash String
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
}